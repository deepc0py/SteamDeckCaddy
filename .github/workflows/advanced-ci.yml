name: Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests every day at 6 AM UTC to catch dependency issues
    - cron: '0 6 * * *'

env:
  FLUTTER_VERSION: '3.22.2'
  CMAKE_VERSION: '3.15'

jobs:
  # 🧪 Matrix builds for comprehensive testing
  test-matrix:
    name: Test on ${{ matrix.os }} / ${{ matrix.build-type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't stop other jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest]
        build-type: [Debug, Release]
        include:
          - os: ubuntu-latest
            platform: linux
            cache-path: /usr/share/vcpkg/installed
          - os: macos-latest  
            platform: macos
            cache-path: /usr/local/share/vcpkg/installed
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup build environment
      uses: ./.github/actions/setup-build-env
      with:
        platform: ${{ matrix.platform }}
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Run comprehensive tests
      run: |
        echo "🧪 Running tests on ${{ matrix.os }} in ${{ matrix.build-type }} mode"
        # Add specific test commands here
        
  # 🔒 Security and quality checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: cpp, dart
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Flutter Security Audit
      run: |
        cd warpdeck-flutter/warpdeck_gui
        flutter pub deps --json | flutter pub audit
        
    - name: Dependency Vulnerability Scan
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'

  # 📊 Code quality metrics
  code-quality:
    name: Code Quality & Metrics
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for metrics
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: C++ Static Analysis
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy
        
        # Run cppcheck on C++ code
        find libwarpdeck warpdeck-cli -name "*.cpp" -o -name "*.h" | \
          xargs cppcheck --enable=all --inconclusive --xml 2> cppcheck-report.xml
          
    - name: Flutter Code Metrics
      run: |
        cd warpdeck-flutter/warpdeck_gui
        flutter pub get
        
        # Generate code metrics
        flutter pub run dart_code_metrics:metrics analyze lib --reporter=html
        
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          cppcheck-report.xml
          warpdeck-flutter/warpdeck_gui/metrics
          
  # 🎯 Performance benchmarks
  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup test environment
      uses: ./.github/actions/setup-build-env
      with:
        platform: linux
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Run performance benchmarks
      run: |
        cd warpdeck-flutter/warpdeck_gui
        
        # Run Flutter performance tests
        flutter test --coverage test/performance/
        
        # Custom benchmark scripts
        dart scripts/performance_test.dart
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          warpdeck-flutter/warpdeck_gui/coverage/
          benchmark-results.json

  # 🐳 Container builds (for future Docker support)
  container-build:
    name: Container Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build test container
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.test
        push: false
        tags: warpdeck:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🎮 Steam Deck specific tests
  steamdeck-validation:
    name: Steam Deck Validation
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[steamdeck]') || github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate Steam Deck compatibility
      run: |
        echo "🎮 Validating Steam Deck specific features..."
        
        # Check for Steam Input configuration
        test -f warpdeck-flutter/warpdeck_gui/steam/game_actions_*.vdf || echo "⚠️ Steam Input config missing"
        
        # Validate desktop file
        desktop-file-validate warpdeck-flutter/warpdeck_gui/steam/warpdeck.desktop
        
        # Check resolution compatibility (1280x800)
        grep -r "1280.*800" warpdeck-flutter/warpdeck_gui/lib/ || echo "⚠️ Steam Deck resolution not explicitly handled"

  # 📱 Cross-platform UI tests  
  ui-tests:
    name: UI Tests (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter with UI test tools
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Run integration tests
      run: |
        cd warpdeck-flutter/warpdeck_gui
        flutter pub get
        
        # Run widget tests
        flutter test --coverage
        
        # Run integration tests (if they exist)
        if [ -d "integration_test" ]; then
          flutter test integration_test/
        fi
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.platform }}
        path: |
          warpdeck-flutter/warpdeck_gui/coverage/
          warpdeck-flutter/warpdeck_gui/test_results/

  # 🔄 Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test-matrix, security-audit, code-quality]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/releases
      
    steps:
    - name: Deployment readiness summary
      run: |
        echo "✅ All quality gates passed!"
        echo "📦 Ready for release deployment"
        echo "🎯 Matrix tests: PASSED"
        echo "🔒 Security audit: PASSED" 
        echo "📊 Code quality: PASSED"
        
    - name: Create deployment artifact
      run: |
        echo '{"status": "ready", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > deployment-ready.json
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-ready
        path: deployment-ready.json