name: Environments & Advanced Features Demo

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test suite'
        required: false
        type: boolean
        default: false

concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || 'auto' }}
  cancel-in-progress: true

jobs:
  # 🧪 Test stage with conditions
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    outputs:
      test-status: ${{ steps.test-results.outputs.status }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run tests with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 10
        max_attempts: 3
        command: |
          echo "🧪 Running comprehensive test suite..."
          # Simulate test results
          echo "All tests passed!"
          
    - name: Generate test results
      id: test-results
      run: |
        echo "status=passed" >> $GITHUB_OUTPUT
        
    - name: Calculate coverage
      id: coverage
      run: |
        echo "percentage=87.5" >> $GITHUB_OUTPUT

  # 🎯 Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || inputs.skip_tests)
    
    environment:
      name: staging
      url: https://staging.warpdeck.dev
      
    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📊 Test coverage: ${{ needs.test.outputs.coverage }}%"
        sleep 5
        echo "✅ Staging deployment complete!"
        
    - name: Run smoke tests
      run: |
        echo "🔍 Running smoke tests against staging..."
        # Simulate API health checks
        curl -f https://httpbin.org/status/200 || exit 1
        echo "✅ Smoke tests passed!"

  # 🏭 Deploy to Production (with approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, deploy-staging]
    if: |
      always() && 
      (needs.test.result == 'success' || inputs.skip_tests) &&
      needs.deploy-staging.result == 'success' &&
      (github.ref == 'refs/heads/main' || inputs.environment == 'production')
    
    environment:
      name: production
      url: https://warpdeck.dev
      
    steps:
    - name: Create deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment',
            auto_merge: false
          });
          
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production..."
        echo "⚠️  This is the live environment!"
        sleep 10
        echo "✅ Production deployment complete!"
        
    - name: Update deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: '${{ steps.deployment.outputs.deployment_id }}',
            state: '${{ job.status }}',
            environment_url: 'https://warpdeck.dev'
          });

  # 📊 Post-deployment monitoring
  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: needs.deploy-production.result == 'success'
    
    steps:
    - name: Monitor application health
      run: |
        echo "📊 Monitoring application health..."
        for i in {1..5}; do
          echo "Health check $i/5..."
          sleep 2
        done
        echo "✅ Application is healthy!"
        
    - name: Send deployment notification
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number || 1,
            body: `🚀 **Deployment Complete!**
            
            - **Environment**: Production
            - **Version**: \`${{ github.sha }}\`
            - **Test Coverage**: ${{ needs.test.outputs.coverage }}%
            - **Status**: ✅ Healthy
            
            [View deployment](https://warpdeck.dev)`
          });

  # 🔄 Rollback capability
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    
    environment:
      name: production-rollback
      
    steps:
    - name: Rollback deployment
      run: |
        echo "🔄 Initiating emergency rollback..."
        echo "⚠️  Rolling back to previous stable version"
        sleep 5
        echo "✅ Rollback complete!"
        
    - name: Notify team
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Emergency Rollback Executed',
            body: `**Rollback Details:**
            
            - **Trigger**: Production deployment failure
            - **Time**: \`${{ github.event.head_commit.timestamp }}\`
            - **Commit**: \`${{ github.sha }}\`
            
            **Next Steps:**
            1. Investigate the deployment failure
            2. Fix the issues in a hotfix branch  
            3. Test thoroughly before next deployment
            
            cc: @team-leads`,
            labels: ['bug', 'critical', 'deployment']
          });