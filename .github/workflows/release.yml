name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: write

env:
  FLUTTER_VERSION: '3.22.2'
  CMAKE_VERSION: '3.15'

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache Homebrew packages
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/Cellar
          /usr/local/var/homebrew
        key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/**') }}
        restore-keys: |
          ${{ runner.os }}-brew-

    - name: Setup Flutter with cache
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: |
        # Install Homebrew dependencies for libwarpdeck
        brew install openssl brotli pkg-config

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'
        
    - name: Cache vcpkg packages
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/share/vcpkg/installed
          ${{ env.VCPKG_ROOT }}/packages
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Install C++ dependencies
      run: |
        $VCPKG_ROOT/vcpkg install boost-asio openssl nlohmann-json

    - name: Build libwarpdeck
      run: |
        cd libwarpdeck
        rm -rf build
        mkdir -p build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
              ..
        make -j$(sysctl -n hw.ncpu)
        cd ../..

    - name: Build CLI
      run: |
        cd warpdeck-cli
        rm -rf build
        mkdir -p build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
              ..
        make -j$(sysctl -n hw.ncpu)
        cd ../..

    - name: Build Flutter GUI
      run: |
        cd warpdeck-flutter/warpdeck_gui
        flutter pub get
        dart run build_runner build --delete-conflicting-outputs
        flutter build macos --release

    - name: Fix macOS dependencies
      run: |
        cd warpdeck-flutter/warpdeck_gui
        chmod +x fix_macos_dependencies.sh
        ./fix_macos_dependencies.sh

    - name: Create DMG
      run: |
        cd warpdeck-flutter/warpdeck_gui/build/macos/Build/Products/Release
        
        # Create a temporary directory for DMG contents
        mkdir -p dmg_temp
        cp -R warpdeck_gui.app dmg_temp/WarpDeck.app
        
        # Create Applications symlink
        ln -s /Applications dmg_temp/Applications
        
        # Create DMG
        hdiutil create -volname "WarpDeck" -srcfolder dmg_temp -ov -format UDZO WarpDeck-macOS.dmg
        
        # Move DMG to workspace root for upload  
        echo "📍 Current directory: $(pwd)"
        echo "📁 Files before move: $(ls -la WarpDeck-macOS.dmg)"
        
        # Calculate path to workspace root from current location
        # We're in: warpdeck-flutter/warpdeck_gui/build/macos/Build/Products/Release
        # We need to go up 7 levels to get to workspace root
        mv WarpDeck-macOS.dmg ../../../../../../..
        echo "✅ DMG moved to workspace root"
        cd ../../../../../../..
        echo "📍 Workspace root directory: $(pwd)"
        echo "📁 DMG at workspace root: $(ls -la WarpDeck-macOS.dmg)"

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: warpdeck-macos
        path: |
          WarpDeck-macOS.dmg
          warpdeck-cli/build/warpdeck

  build-linux:
    name: Build Linux
    runs-on: ubuntu-22.04  # Ubuntu 20.04 retiring April 2025
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache APT packages
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: cmake build-essential pkg-config libssl-dev libavahi-client-dev libgtk-3-dev ninja-build clang libayatana-appindicator3-dev libayatana-ido3-0.4-dev librsvg2-bin imagemagick
        version: 1.0

    - name: Setup Flutter with cache
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'
        
    - name: Cache vcpkg packages
      uses: actions/cache@v4
      with:
        path: |
          /usr/share/vcpkg/installed
          ${{ env.VCPKG_ROOT }}/packages
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Install C++ dependencies
      run: |
        $VCPKG_ROOT/vcpkg install boost-asio openssl nlohmann-json
        
    - name: Configure for older Linux compatibility
      run: |
        # Set flags for better compatibility with older Linux systems
        echo "LDFLAGS=-static-libgcc -static-libstdc++" >> $GITHUB_ENV

    - name: Build libwarpdeck
      run: |
        cd libwarpdeck
        rm -rf build
        mkdir -p build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_EXE_LINKER_FLAGS="-static-libgcc -static-libstdc++" \
              ..
        make -j$(nproc)
        cd ../..

    - name: Build CLI
      run: |
        cd warpdeck-cli
        rm -rf build
        mkdir -p build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_EXE_LINKER_FLAGS="-static-libgcc -static-libstdc++" \
              ..
        make -j$(nproc)
        cd ../..

    - name: Build Flutter GUI
      run: |
        cd warpdeck-flutter/warpdeck_gui
        flutter pub get
        dart run build_runner build --delete-conflicting-outputs
        flutter build linux --release

    - name: Fix Linux dependencies
      run: |
        cd warpdeck-flutter/warpdeck_gui/build/linux/x64/release/bundle
        echo "📦 Copying libwarpdeck.so to Flutter bundle..."
        
        # Find the built library (mirroring macOS approach)
        BUILD_DIR="../../../../../../libwarpdeck/build"
        echo "🔍 Contents of libwarpdeck build directory:"
        ls -la "$BUILD_DIR" 2>/dev/null || echo "  libwarpdeck/build directory not found"
        
        POSSIBLE_LIBS=(
          "$BUILD_DIR/libwarpdeck.so"
          "$BUILD_DIR/libwarpdeck_shared.so"
        )
        
        FOUND_LIB=""
        for lib_path in "${POSSIBLE_LIBS[@]}"; do
          if [ -f "$lib_path" ]; then
            FOUND_LIB="$lib_path"
            echo "  ✅ Found library at: $lib_path"
            break
          else
            echo "  ❌ Not found: $lib_path"
          fi
        done
        
        if [ -n "$FOUND_LIB" ]; then
          echo "  ✅ Copying $(basename "$FOUND_LIB") to Flutter bundle"
          cp "$FOUND_LIB" ./libwarpdeck.so
          echo "  ✅ Library copied successfully"
          ls -la ./libwarpdeck.so
        else
          echo "  ❌ ERROR: No libwarpdeck library found!"
          exit 1
        fi

    - name: Create AppImage
      run: |
        # Download AppImage tools
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Extract the AppImage tool since FUSE is not available in CI
        ./appimagetool-x86_64.AppImage --appimage-extract
        APPIMAGE_TOOL="$(pwd)/squashfs-root/AppRun"
        
        cd warpdeck-flutter/warpdeck_gui/build/linux/x64/release/bundle
        
        # Create AppDir structure
        mkdir -p WarpDeck.AppDir/usr/bin
        mkdir -p WarpDeck.AppDir/usr/lib
        mkdir -p WarpDeck.AppDir/usr/share/applications
        mkdir -p WarpDeck.AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy application files (exclude the AppDir we just created)
        for item in *; do
          if [ "$item" != "WarpDeck.AppDir" ]; then
            cp -r "$item" WarpDeck.AppDir/usr/bin/
          fi
        done
        
        # Copy libwarpdeck.so from Flutter bundle to AppImage (already copied in previous step)
        echo "📦 Bundling libwarpdeck.so into AppImage..."
        if [ -f "libwarpdeck.so" ]; then
          echo "  ✅ Found libwarpdeck.so in Flutter bundle, copying to AppImage"
          cp libwarpdeck.so WarpDeck.AppDir/usr/bin/libwarpdeck.so
          echo "  ✅ Library bundled into AppImage"
        else
          echo "  ❌ ERROR: libwarpdeck.so missing from Flutter bundle!"
          echo "🔍 Contents of current directory:"
          ls -la
          exit 1
        fi
        
        # Copy system tray dependencies for Steam Deck compatibility
        echo "📦 Bundling system tray dependencies for Steam Deck compatibility..."
        
        # Bundle core system tray libraries directly
        mkdir -p WarpDeck.AppDir/usr/lib
        
        # Detect architecture for correct library paths
        ARCH=$(dpkg --print-architecture)
        echo "🔍 Build architecture: $ARCH"
        
        # Debug: Show all available ayatana libraries
        echo "🔍 Available ayatana libraries on build system:"
        find /usr/lib* /lib* -name "*ayatana*" 2>/dev/null || echo "  None found"
        echo "🔍 Available dbusmenu libraries:"
        find /usr/lib* /lib* -name "*dbusmenu*" 2>/dev/null || echo "  None found"
        
        # Copy ayatana libraries with architecture-aware paths
        for lib in libayatana-appindicator3.so.1 libayatana-indicator3.so.7 libayatana-ido3-0.4.so.0 libdbusmenu-glib.so.4 libdbusmenu-gtk3.so.4; do
          found=false
          # Try architecture-specific paths first, then generic paths
          for path in "/usr/lib/$ARCH-linux-gnu" /usr/lib/x86_64-linux-gnu /usr/lib /lib/x86_64-linux-gnu /usr/lib64; do
            if [ -f "$path/$lib" ]; then
              echo "  ✅ Bundling $lib from $path"
              cp "$path/$lib" WarpDeck.AppDir/usr/lib/
              found=true
              break
            fi
          done
          if [ "$found" = false ]; then
            echo "  ❌ Missing: $lib"
          fi
        done
        
        # Validate bundled libraries
        echo "🔍 Validating bundled system tray libraries..."
        if [ -f "WarpDeck.AppDir/usr/lib/libayatana-appindicator3.so.1" ]; then
          echo "✅ libayatana-appindicator3.so.1 successfully bundled"
          ldd WarpDeck.AppDir/usr/lib/libayatana-appindicator3.so.1 | head -5
        else
          echo "⚠️  libayatana-appindicator3.so.1 not found in bundle"
        fi
        
        # Create desktop file
        cat > WarpDeck.AppDir/usr/share/applications/warpdeck.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=WarpDeck
        Comment=Secure peer-to-peer file sharing
        Exec=warpdeck_gui
        Icon=warpdeck
        Categories=Network;FileTransfer;
        EOF
        
        # Copy icon - just use the one that's obviously there
        echo "🔍 Current directory contents:"
        ls -la
        echo "📁 Looking for warpdeck.png..."
        find . -name "warpdeck.png" -type f
        
        # Just copy the damn icon that we can see exists
        if [ -f "data/flutter_assets/assets/icons/warpdeck.png" ]; then
          echo "✅ Found PNG icon, copying it"
          cp data/flutter_assets/assets/icons/warpdeck.png WarpDeck.AppDir/usr/share/icons/hicolor/256x256/apps/warpdeck.png
          cp data/flutter_assets/assets/icons/warpdeck.png WarpDeck.AppDir/warpdeck.png
        elif [ -f "usr/bin/data/flutter_assets/assets/icons/warpdeck.png" ]; then
          echo "✅ Found PNG icon in usr/bin path"
          cp usr/bin/data/flutter_assets/assets/icons/warpdeck.png WarpDeck.AppDir/usr/share/icons/hicolor/256x256/apps/warpdeck.png
          cp usr/bin/data/flutter_assets/assets/icons/warpdeck.png WarpDeck.AppDir/warpdeck.png
        else
          echo "❌ Just create a simple PNG placeholder"
          # Screw ImageMagick, just create a simple file
          echo "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAdgAAAHYBTnsmCAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAANCSURBVHic7doxAQAAAMKg9U9tDQ+gwIA" | base64 -d > WarpDeck.AppDir/usr/share/icons/hicolor/256x256/apps/warpdeck.png
          cp WarpDeck.AppDir/usr/share/icons/hicolor/256x256/apps/warpdeck.png WarpDeck.AppDir/warpdeck.png
        fi
        
        echo "✅ Icon should be placed at:"
        ls -la WarpDeck.AppDir/warpdeck.png
        ls -la WarpDeck.AppDir/usr/share/icons/hicolor/256x256/apps/warpdeck.png
        
        # Create AppRun script
        echo '#!/bin/bash' > WarpDeck.AppDir/AppRun
        echo 'HERE="$(dirname "$(readlink -f "${0}")")"' >> WarpDeck.AppDir/AppRun
        echo 'export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"' >> WarpDeck.AppDir/AppRun
        echo 'exec "${HERE}/usr/bin/warpdeck_gui" "$@"' >> WarpDeck.AppDir/AppRun
        chmod +x WarpDeck.AppDir/AppRun
        
        # 🔍 FINAL VERIFICATION: Check that libwarpdeck.so is in the AppImage
        echo "🔍 FINAL VERIFICATION: Checking AppImage contents before building..."
        echo "📁 Contents of WarpDeck.AppDir/usr/bin/:"
        ls -la WarpDeck.AppDir/usr/bin/ | head -15
        if [ -f "WarpDeck.AppDir/usr/bin/libwarpdeck.so" ]; then
          echo "✅ libwarpdeck.so IS present in AppImage!"
          echo "📊 Library file details:"
          ls -la WarpDeck.AppDir/usr/bin/libwarpdeck.so
          file WarpDeck.AppDir/usr/bin/libwarpdeck.so
        else
          echo "❌ libwarpdeck.so is MISSING from AppImage!"
          echo "🔍 Searching entire AppDir for any libwarpdeck files:"
          find WarpDeck.AppDir -name "*libwarpdeck*" -type f 2>/dev/null || echo "  No libwarpdeck files found in AppDir"
        fi
        
        # Copy desktop file to root
        cp WarpDeck.AppDir/usr/share/applications/warpdeck.desktop WarpDeck.AppDir/
        
        # Build AppImage
        if [ ! -f "$APPIMAGE_TOOL" ]; then
          echo "❌ AppImage tool not found at $APPIMAGE_TOOL"
          exit 1
        fi
        "$APPIMAGE_TOOL" WarpDeck.AppDir WarpDeck.AppImage
        
        # Validate AppImage after creation
        echo "🔍 Validating created AppImage..."
        if [ ! -f "WarpDeck.AppImage" ]; then
          echo "❌ AppImage creation failed - file not found"
          exit 1
        fi
        
        # Check AppImage is executable
        if [ ! -x "WarpDeck.AppImage" ]; then
          echo "❌ AppImage is not executable"
          exit 1
        fi
        
        # Test AppImage can show help (basic functionality test)
        echo "🧪 Testing AppImage basic functionality..."
        timeout 10s ./WarpDeck.AppImage --help || echo "⚠️  AppImage help test failed (may be normal for GUI apps)"
        
        # Validate desktop file integration
        echo "🖥️  Validating desktop integration..."
        ./WarpDeck.AppImage --appimage-extract >/dev/null 2>&1
        if [ -f "squashfs-root/warpdeck.desktop" ]; then
          echo "✅ Desktop file found in AppImage"
          if command -v desktop-file-validate >/dev/null 2>&1; then
            desktop-file-validate squashfs-root/warpdeck.desktop && echo "✅ Desktop file is valid" || echo "⚠️  Desktop file validation failed"
          fi
        else
          echo "⚠️  Desktop file not found in AppImage root"
        fi
        
        # Check bundled libraries are present
        echo "📚 Checking bundled libraries in AppImage..."
        if [ -d "squashfs-root/usr/lib" ]; then
          echo "📋 Bundled system tray libraries:"
          find squashfs-root/usr/lib -name "*ayatana*" -o -name "*dbusmenu*" | head -10 || echo "  No system tray libraries found"
        fi
        
        # Check icon is present
        if [ -f "squashfs-root/warpdeck.png" ]; then
          echo "✅ Icon found in AppImage"
        else
          echo "⚠️  Icon not found in AppImage"
        fi
        
        # Clean up extraction
        rm -rf squashfs-root
        
        echo "✅ AppImage validation complete"
        
        # Move AppImage to workspace root for upload
        echo "📍 Current directory: $(pwd)"
        echo "📁 Files before move: $(ls -la WarpDeck.AppImage)"
        
        # Calculate path to workspace root from current location
        # We're in: warpdeck-flutter/warpdeck_gui/build/linux/x64/release/bundle
        # We need to go up 7 levels to get to workspace root
        mv WarpDeck.AppImage ../../../../../../..
        echo "✅ AppImage moved to workspace root"
        cd ../../../../../../..
        echo "📍 Workspace root directory: $(pwd)"  
        echo "📁 AppImage at workspace root: $(ls -la WarpDeck.AppImage)"

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: warpdeck-linux
        path: |
          WarpDeck.AppImage
          warpdeck-cli/build/warpdeck

  release:
    name: Create Release
    needs: [build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: warpdeck-macos
        path: ./artifacts/macos

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: warpdeck-linux
        path: ./artifacts/linux

    - name: Prepare CLI assets with correct names
      run: |
        # Copy CLI binaries with correct names for release
        cp ./artifacts/macos/warpdeck-cli/build/warpdeck ./artifacts/macos/warpdeck-cli-macos
        cp ./artifacts/linux/warpdeck-cli/build/warpdeck ./artifacts/linux/warpdeck-cli-linux

    - name: Generate release tag
      id: tag
      run: |
        # Create a tag based on date and commit
        TAG="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: WarpDeck ${{ steps.tag.outputs.tag }}
        body: |
          ## WarpDeck Release ${{ steps.tag.outputs.tag }}
          
          🚀 **Automatic build from latest main branch**
          
          ### 📦 Downloads
          
          | Platform | Download | Size | Format |
          |----------|----------|------|--------|
          | **macOS** | [WarpDeck-macOS.dmg](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/WarpDeck-macOS.dmg) | ~25 MB | Universal Binary |
          | **Linux** | [WarpDeck.AppImage](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/WarpDeck.AppImage) | ~45 MB | Portable |
          | **Steam Deck** | [WarpDeck.AppImage](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/WarpDeck.AppImage) | ~45 MB | Optimized |
          
          ### 🔧 CLI Tools
          - macOS CLI: [warpdeck-cli-macos](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/warpdeck-cli-macos)
          - Linux CLI: [warpdeck-cli-linux](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/warpdeck-cli-linux)
          
          ### ✨ What's Included
          - 🔒 Privacy-first peer-to-peer file sharing
          - ⚡ Lightning-fast transfers over local network
          - 🎮 Steam Deck optimized with touch controls
          - 🌐 Cross-platform: macOS ↔ Linux ↔ Steam Deck
          - 🎨 Beautiful Material Design 3 interface
          
          ### 📝 Changes in this Build
          Built from commit: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          
          ---
          
          **🔗 Quick Install:**
          ```bash
          # macOS
          curl -L -o WarpDeck.dmg https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/WarpDeck-macOS.dmg
          
          # Linux/Steam Deck
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/WarpDeck.AppImage
          chmod +x WarpDeck.AppImage
          ```
        draft: false
        prerelease: false
        files: |
          ./artifacts/macos/WarpDeck-macOS.dmg
          ./artifacts/linux/WarpDeck.AppImage
          ./artifacts/macos/warpdeck-cli-macos
          ./artifacts/linux/warpdeck-cli-linux

    - name: Update latest release
      run: |
        # Tag this release as 'latest' for the download links in README
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Delete existing latest tag if it exists
        git tag -d latest 2>/dev/null || true
        git push origin :refs/tags/latest 2>/dev/null || true
        
        # Create new latest tag
        git tag latest
        git push origin latest